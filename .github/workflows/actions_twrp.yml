name: Make Recovery TEST

on:
  workflow_dispatch:
    inputs:
      LIBRARY_NAME:
        description: 'LIBRARY_NAME'
        required: true
        default: 'omni'
      LIBRARY_URL:
        description: 'LIBRARY_URL'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git'
      LIBRARY_BRANCH:
        description: 'LIBRARY_BRANCH'
        required: true
        default: 'twrp-10.0-deprecated'
      DEVICE_URL:
        description: 'DEVICE_URL'
        required: true
        default: 'https://github.com/Amlogic-Devlopment-PureFusion/android_device_askey_adt3-TWRP'
      DEVICE_BRANCH:
        description: 'DEVICE_BRANCH'
        required: true
        default: 'android-10'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/askey/apt3'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'apt3'
      crypto:
        description: "Disable crypto module"
        required: false
        default: "false"
      Enable_cache:
        description: "Enable caching"
        required: true
        default: "true"
      Delete_oldReleases:
        description: "Delete old releases"
        required: false
        default: "false"
env:
  WorkSpace: WorkSpace
  Rec_name: TWRP11
  Rec_ver: 3.6.0
  device: adt3
  DT_path: device/askey/apt3
  ProductFileHeader: twrp
  target: recoveryimage
  Author: ${{github.actor}}
  Delete_old: false
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Show system
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net
        [ -f /etc/issue ] && cat /etc/issue
        ulimit -a

    - name: "Cleanup Environment"
      uses: rokibhasansagar/slimhub_actions@main

    - name: Initializing environment
      run: |
          echo "::group::Install Build Env Tool"
          sudo -E apt-get clean
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install curl libstdc++6 git wget rsync aria2
          mkdir -p ~/.bin
          export PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo
          echo "::endgroup::"
          git clone https://gitlab.com/OrangeFox/misc/scripts.git --depth=1 --single-branch
          cd scripts
          echo "::group::Setup Build Env"
          sudo -E bash setup/android_build_env.sh
          echo "::endgroup::"
          echo "::group::Install Android Sdk"
          sudo -E bash setup/install_android_sdk.sh
          echo "::endgroup::"

    - name: environment extra
      run: |
        sudo -E apt-get clean -qq
        for i in $(ls /usr/bin/*-8); do sudo -E ln -sf $i ${i%%-8*}; done
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Set variables
      run: |
        echo "::set-output name=date::$(date +%F)"
      id: var

    - name: Sync recovery source
      run: |
        mkdir ${{env.WorkSpace}}
        cd ${{env.WorkSpace}}
        echo "::set-output name=pwd::$(pwd)"
        git config --global user.name "Eliminater74's Action-Build-Bot"
        git config --global user.email "Android@purefusion.com"
        PATH=~/bin:$PATH
        echo "::group::Repo Init"
        repo init -u ${{ github.event.inputs.LIBRARY_URL }} -b ${{ github.event.inputs.LIBRARY_BRANCH }} --depth=1 --groups=all,-notdefault,-device,-darwin,-x86,-mips
        echo "::endgroup::"
        echo "::group::Repo Sync"
        repo sync -j$(nproc --all)
        echo "::endgroup::"
      id: pwd

    - name: Sync device tree
      run: |
        cd ${{env.WorkSpace}}
        git clone ${{ github.event.inputs.DEVICE_URL }} --depth=1 --single-branch ${{ github.event.inputs.DEVICE_PATH }}

    - name: Disable Crypto
      if: (github.event.inputs.crypto == 'true' && github.event.inputs.crypto  != 'false') || contains(github.event.action, 'crypto')
      run: |
        cd ${{env.WorkSpace}}/${{env.DT_path}}
        sed -i 's/TW_INCLUDE_CRYPTO := true/TW_INCLUDE_CRYPTO := false/g' BoardConfig.mk
        sed -i 's/TW_INCLUDE_CRYPTO_FBE := true/TW_INCLUDE_CRYPTO_FBE := false/g' BoardConfig.mk
    - name: Show tree
      run: tree -C -d -L 3

    - name: Restore cache
      uses: actions/cache@v2
      if: (github.event.inputs.Enable_cache == 'true' && github.event.inputs.Enable_cache  != 'false') || contains(github.event.action, 'Enable_cache')
      with:
        path: |
          ~/.ccache
          ${{env.WorkSpace}}/out
          key: ${{runner.os}}-${{env.Rec_name}}-${{env.Rec_ver}}-${{env.device}}
          restore-keys: |
          ${{runner.os}}-${{env.Rec_name}}-${{env.Rec_ver}}-${{env.device}}

    - name: Setup ccache
      uses: alexjurkiewicz/setup-ccache@master
      if: (github.event.inputs.Enable_cache == 'true' && github.event.inputs.Enable_cache  != 'false') || contains(github.event.action, 'Enable_cache')
      with:
        max-size: 5G
        extra-config: |
          keep_comments_cpp = true

    - name: Build ${{env.Rec_name}}
      run: |
        cd ${{env.WorkSpace}}
        echo "::group::Run Envsetup.sh"
        source build/envsetup.sh
        echo "::endgroup::"
        echo "::group::Set EnvPath"
        export ALLOW_MISSING_DEPENDENCIES=true
        echo "::endgroup::"
        echo "::group::Lunch ${{env.ProductFileHeader}}_${{env.device}}-eng"
        lunch ${{env.ProductFileHeader}}_${{env.device}}-eng
        echo "::endgroup::"
        echo "::group::Sync"
        repo sync -j$(nproc --all)
        echo "::endgroup::"
        echo "::group::Build ${{env.Rec_name}}"
        mka ${{env.target}}
        echo "::endgroup::"
      shell: bash

    - name: Get info
      id: info
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d-%H-%M")"
        echo "::set-output name=OutFolder::"${{env.WorkSpace}}/out/target/product/${{env.device}}""
      shell: bash

#    - name: Building
#      run: |
#        PATH=~/bin:$PATH
#        cd ${{ steps.pwd.outputs.pwd }}
#        PATHexport ALLOW_MISSING_DEPENDENCIES=true
#        source build/envsetup.sh
#        lunch ${{ github.event.inputs.LIBRARY_NAME }}_${{ github.event.inputs.DEVICE_NAME }}-eng
#        make clean
#        make recoveryimage -j$(nproc --all)

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/recovery.img
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: Recovery for ${{ github.event.inputs.DEVICE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: (github.event.inputs.Delete_oldReleases == 'true' && github.event.inputs.Delete_oldReleases  != 'false') || contains(github.event.action, 'Delete_oldReleases')
      with:
        keep_latest: 12
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        keep_minimum_runs: 10
